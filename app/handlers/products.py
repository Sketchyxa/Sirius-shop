from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ParseMode
from loguru import logger
from bson import ObjectId

from app.filters.admin import AdminFilter
from app.states.admin_states import ProductManagement
from app.keyboards import (
    get_products_management_keyboard,
    get_category_actions_keyboard,
    get_admin_product_actions_keyboard,
    get_add_items_method_keyboard,
    get_items_management_keyboard
)
from app.database.repositories import CategoryRepository, ProductRepository, ProductItemRepository


router = Router()
router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())


@router.callback_query(F.data == "admin:products_management")
async def products_management(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    await callback.message.edit_text(
        "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_products_management_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

@router.callback_query(F.data == "admin:add_category")
async def add_category(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.set_state(ProductManagement.add_category)
    
    await callback.message.edit_text(
        "üìÇ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )
    
    await callback.answer()


@router.message(ProductManagement.add_category)
async def process_add_category(message: Message, state: FSMContext, category_repo: CategoryRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_products_management_keyboard()
        )
        return
    
    category_name = message.text.strip()
    
    if not category_name:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = await category_repo.create_category(name=category_name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏",
            callback_data="admin:products_management"
        ))
        
        await message.answer(
            "‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{category.name}</b>\n"
            f"ID: <code>{category.id}</code>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!",
            reply_markup=kb.as_markup(),
            parse_mode=ParseMode.HTML
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()


@router.callback_query(F.data == "admin:list_categories")
async def list_categories(callback: CallbackQuery, category_repo: CategoryRepository):
    """–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    categories = await category_repo.get_all_categories()
    
    if not categories:
        await callback.message.edit_text(
            "üìÇ <b>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
            reply_markup=get_products_management_keyboard(),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
        return
    
    text = "üìÇ <b>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    kb = InlineKeyboardBuilder()
    
    for category in categories:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ç–µ–∫—Å—Ç
        text += f"‚Ä¢ <b>{category.name}</b> (ID: <code>{category.id}</code>)\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        kb.row(InlineKeyboardButton(
            text=f"üìÇ {category.name}",
            callback_data=f"admin:category:{category.id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    kb.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="admin:products_management"
    ))
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.as_markup(),
        parse_mode=ParseMode.HTML
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("admin:category:"))
async def category_actions(callback: CallbackQuery, category_repo: CategoryRepository):
    """–î–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_id = callback.data.split(":")[-1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = await category_repo.get_category(category_id)
        
        if not category:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_products_management_keyboard(),
                parse_mode=ParseMode.HTML
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}</b>\n\n"
            f"ID: <code>{category.id}</code>\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {category.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_category_actions_keyboard(str(category.id)),
            parse_mode=ParseMode.HTML
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=get_products_management_keyboard(),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()


@router.callback_query(F.data.startswith("admin:edit_category:"))
async def edit_category(callback: CallbackQuery, state: FSMContext, category_repo: CategoryRepository):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_id = callback.data.split(":")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(category_id=category_id)
    await state.set_state(ProductManagement.edit_category)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = await category_repo.get_category(category_id)
    
    await callback.message.edit_text(
        f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{category.name}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode=ParseMode.HTML
    )
    
    await callback.answer()


@router.message(ProductManagement.edit_category)
async def process_edit_category(message: Message, state: FSMContext, category_repo: CategoryRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_products_management_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    category_id = data.get("category_id")
    
    if not category_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ –Ω–∞–π–¥–µ–Ω ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()
        return
    
    category_name = message.text.strip()
    
    if not category_name:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = await category_repo.get_category(category_id)
        
        if not category:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode=ParseMode.HTML
            )
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        old_name = category.name
        category.name = category_name
        await category_repo.update_category(category)
        
        await message.answer(
            "‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
            f"–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{old_name}</b>\n"
            f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{category.name}</b>",
            parse_mode=ParseMode.HTML
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()


@router.callback_query(F.data.startswith("admin:delete_category:"))
async def delete_category_confirm(callback: CallbackQuery, state: FSMContext, category_repo: CategoryRepository):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_id = callback.data.split(":")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(category_id=category_id)
    await state.set_state(ProductManagement.delete_category_confirm)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = await category_repo.get_category(category_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin:delete_category_confirm:{category_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"admin:category:{category_id}")
    )
    
    await callback.message.edit_text(
        f"‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>{category.name}</b>?\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=kb.as_markup(),
        parse_mode=ParseMode.HTML
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("admin:delete_category_confirm:"))
async def delete_category_process(callback: CallbackQuery, state: FSMContext, category_repo: CategoryRepository):
    """–ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_id = callback.data.split(":")[-1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = await category_repo.get_category(category_id)
        
        if not category:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_products_management_keyboard()
            )
            await callback.answer()
            await state.clear()
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_name = category.name
        result = await category_repo.delete_category(category_id)
        
        if result:
            await callback.message.edit_text(
                "‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞</b>\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=get_products_management_keyboard(),
                parse_mode=ParseMode.HTML
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                reply_markup=get_products_management_keyboard(),
                parse_mode=ParseMode.HTML
            )
        
        await callback.answer()
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            reply_markup=get_products_management_keyboard(),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
        await state.clear()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏

@router.callback_query(F.data == "admin:add_product")
async def add_product(callback: CallbackQuery, state: FSMContext, category_repo: CategoryRepository):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = await category_repo.get_all_categories()
    
    if not categories:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
            reply_markup=get_products_management_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    await state.set_state(ProductManagement.add_product_name)
    
    await callback.message.edit_text(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )
    
    await callback.answer()


@router.message(ProductManagement.add_product_name)
async def process_add_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_products_management_keyboard()
        )
        return
    
    product_name = message.text.strip()
    
    if not product_name:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await state.update_data(product_name=product_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
    await state.set_state(ProductManagement.add_product_description)
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: –æ–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )


@router.message(ProductManagement.add_product_description)
async def process_add_product_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_products_management_keyboard()
        )
        return
    
    product_description = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await state.update_data(product_description=product_description)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ü–µ–Ω—ã
    await state.set_state(ProductManagement.add_product_price)
    
    await message.answer(
        "üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: —Ü–µ–Ω–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>100</code> –∏–ª–∏ <code>99.99</code>\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )


@router.message(ProductManagement.add_product_price)
async def process_add_product_price(message: Message, state: FSMContext, category_repo: CategoryRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_products_management_keyboard()
        )
        return
    
    try:
        product_price = float(message.text.strip().replace(",", "."))
        
        if product_price <= 0:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
        await state.update_data(product_price=product_price)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        categories = await category_repo.get_all_categories()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        kb = InlineKeyboardBuilder()
        
        for category in categories:
            kb.row(InlineKeyboardButton(
                text=category.name,
                callback_data=f"admin:add_product_category:{category.id}"
            ))
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.set_state(ProductManagement.add_product_category)
        
        await message.answer(
            "üìÇ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=kb.as_markup(),
            parse_mode=ParseMode.HTML
        )
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode=ParseMode.HTML
        )


@router.callback_query(ProductManagement.add_product_category, F.data.startswith("admin:add_product_category:"))
async def process_add_product_category(callback: CallbackQuery, state: FSMContext, category_repo: CategoryRepository, product_repo: ProductRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_id = callback.data.split(":")[-1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = await category_repo.get_category(category_id)
        
        if not category:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_products_management_keyboard()
            )
            await callback.answer()
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.update_data(category_id=str(category.id))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
        data = await state.get_data()
        product_name = data.get("product_name")
        product_description = data.get("product_description")
        product_price = data.get("product_price")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        product = await product_repo.create_product(
            name=product_name,
            description=product_description,
            price=product_price,
            category_id=category.id
        )
        
        await callback.message.edit_text(
            "‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{product.name}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"–¶–µ–Ω–∞: <b>{product.price:.2f}‚ÇΩ</b>\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category.name}</b>\n"
            f"ID: <code>{product.id}</code>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.\n\n"
            "–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –æ–ø–ª–∞—Ç—É –ó–≤–µ–∑–¥–∞–º–∏ Telegram –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞?",
            reply_markup=get_admin_product_actions_keyboard(str(product.id)),
            parse_mode=ParseMode.HTML
        )
        
        await callback.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            reply_markup=get_products_management_keyboard(),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
        await state.clear()


@router.callback_query(F.data == "admin:list_products")
async def list_products(callback: CallbackQuery, product_repo: ProductRepository, category_repo: CategoryRepository):
    """–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    products = await product_repo.get_all_products()
    
    if not products:
        try:
            await callback.message.edit_text(
                "üì¶ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
                "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä.",
                reply_markup=get_products_management_keyboard(),
                parse_mode=ParseMode.HTML
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
                await callback.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë
                raise
        await callback.answer()
        return
    
    text = "üì¶ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    kb = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
    categories = {str(c.id): c.name for c in await category_repo.get_all_categories()}
    
    for product in products:
        category_name = categories.get(str(product.category_id), "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Ç–µ–∫—Å—Ç
        text += (
            f"‚Ä¢ <b>{product.name}</b>\n"
            f"  –¶–µ–Ω–∞: <b>{product.price:.2f}‚ÇΩ</b>\n"
            f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.quantity} —à—Ç.\n"
            f"  ID: <code>{product.id}</code>\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º
        kb.row(InlineKeyboardButton(
            text=f"üì¶ {product.name} - {product.price:.2f}‚ÇΩ",
            callback_data=f"admin:product:{product.id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    kb.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="admin:products_management"
    ))
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏
    if len(text) > 4000:
        text = "üì¶ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n" + "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=kb.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
            await callback.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë
            raise
    
    await callback.answer()


@router.callback_query(F.data.startswith("admin:product:"))
async def product_actions(callback: CallbackQuery, product_repo: ProductRepository, category_repo: CategoryRepository):
    """–î–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º"""
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
    product_id = callback.data.split(":")[-1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
        product = await product_repo.get_product(product_id)
        
        if not product:
            try:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞\n\n"
                    "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=get_products_management_keyboard(),
                    parse_mode=ParseMode.HTML
                )
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    raise
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_name = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        if product.category_id:
            category = await category_repo.get_category(product.category_id)
            if category:
                category_name = category.name
        
        # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö HTML-—Ç–µ–≥–æ–≤
        import re
        clean_description = product.description or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        if clean_description != '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML-—Ç–µ–≥–∏
            clean_description = re.sub(r'<[^>]+>', '', clean_description)
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            clean_description = clean_description.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product_info = (
            f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {clean_description}\n"
            f"üí∞ –¶–µ–Ω–∞: {product.price:.2f}‚ÇΩ\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.quantity} —à—Ç.\n"
            f"üìä –ü—Ä–æ–¥–∞–Ω–æ: {product.sales_count} —à—Ç.\n"
            f"üÜî ID: {product.id}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {product.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö
        if product.image_url:
            product_info += f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –ó–∞–≥—Ä—É–∂–µ–Ω–æ\n"
        if product.instruction_link:
            product_info += f"üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
        if product.stars_enabled:
            product_info += f"‚ú® –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏: –í–∫–ª—é—á–µ–Ω–∞ ({product.stars_price or '‚Äî'} ‚≠ê)\n"
        else:
            product_info += f"‚ú® –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏: –í—ã–∫–ª—é—á–µ–Ω–∞\n"
        
        try:
            await callback.message.edit_text(
                product_info + "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_admin_product_actions_keyboard(str(product.id))
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                raise
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        try:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.",
                reply_markup=get_products_management_keyboard(),
                parse_mode=ParseMode.HTML
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            else:
                raise
        await callback.answer()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤

@router.callback_query(F.data.startswith("admin:add_items:"))
async def add_items_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–∞"""
    product_id = callback.data.split(":")[-1]
    
    await callback.message.edit_text(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:",
        reply_markup=get_add_items_method_keyboard(product_id),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin:add_item_single:"))
async def add_item_single_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    product_id = callback.data.split(":")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id)
    await state.set_state(ProductManagement.add_items)
    
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å, –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ —Ç.–¥.)\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.message(ProductManagement.add_items)
async def process_add_item_single(message: Message, state: FSMContext, product_item_repo: ProductItemRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_products_management_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get("product_id")
    
    if not product_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ –Ω–∞–π–¥–µ–Ω ID —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()
        return
    
    item_data = message.text.strip()
    
    if not item_data:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–æ–≤–∞—Ä–∞
        item = await product_item_repo.create_item(product_id, item_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π
        await product_item_repo.update_product_quantity_from_items(product_id)
        
        await message.answer(
            "‚úÖ <b>–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>\n\n"
            f"–î–∞–Ω–Ω—ã–µ: <code>{item.data}</code>\n"
            f"ID: <code>{item.id}</code>\n\n"
            "–ü–æ–∑–∏—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∂–µ!",
            reply_markup=get_items_management_keyboard(product_id),
            parse_mode=ParseMode.HTML
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()


@router.callback_query(F.data.startswith("admin:add_items_batch:"))
async def add_items_batch_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–∞–∫–µ—Ç–æ–º"""
    product_id = callback.data.split(":")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id)
    await state.set_state(ProductManagement.add_items_batch)
    
    await callback.message.edit_text(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–∞–∫–µ—Ç–æ–º</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>–ª–æ–≥–∏–Ω1:–ø–∞—Ä–æ–ª—å1\n"
        "–ª–æ–≥–∏–Ω2:–ø–∞—Ä–æ–ª—å2\n"
        "–∫–ª—é—á1:–∞–∫—Ç–∏–≤–∞—Ü–∏—è1</code>\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.message(ProductManagement.add_items_batch)
async def process_add_items_batch(message: Message, state: FSMContext, product_item_repo: ProductItemRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–∞–∫–µ—Ç–æ–º"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_products_management_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get("product_id")
    
    if not product_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ –Ω–∞–π–¥–µ–Ω ID —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    items_data = [line.strip() for line in message.text.split('\n') if line.strip()]
    
    if not items_data:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
        created_items = await product_item_repo.create_multiple_items(product_id, items_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π
        await product_item_repo.update_product_quantity_from_items(product_id)
        
        await message.answer(
            "‚úÖ <b>–ü–æ–∑–∏—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã</b>\n\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: <b>{len(created_items)}</b>\n\n"
            "–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–¥–∞–∂–µ!",
            reply_markup=get_items_management_keyboard(product_id),
            parse_mode=ParseMode.HTML
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()


@router.callback_query(F.data.startswith("admin:view_items:"))
async def view_items(callback: CallbackQuery, product_item_repo: ProductItemRepository):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–∞"""
    product_id = callback.data.split(":")[-1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
        items = await product_item_repo.get_all_items(product_id)
        available_count = await product_item_repo.count_available_items(product_id)
        total_count = await product_item_repo.count_total_items(product_id)
        
        if not items:
            await callback.message.edit_text(
                "üì¶ <b>–ü–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                "–ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏.",
                reply_markup=get_items_management_keyboard(product_id),
                parse_mode=ParseMode.HTML
            )
            await callback.answer()
            return
        
        text = f"üì¶ <b>–ü–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        text += f"üìä –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: <b>{total_count}</b>\n"
        text += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: <b>{available_count}</b>\n"
        text += f"‚ùå –ü—Ä–æ–¥–∞–Ω–æ: <b>{total_count - available_count}</b>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–∑–∏—Ü–∏–π
        for i, item in enumerate(items[:10], 1):
            status = "‚úÖ" if not item.is_sold else "‚ùå"
            text += f"{i}. {status} <code>{item.data}</code>\n"
        
        if len(items) > 10:
            text += f"\n... –∏ –µ—â–µ <b>{len(items) - 10}</b> –ø–æ–∑–∏—Ü–∏–π"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_items_management_keyboard(product_id),
            parse_mode=ParseMode.HTML
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö.",
            reply_markup=get_items_management_keyboard(product_id),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()


@router.callback_query(F.data.startswith("admin:edit_product:"))
async def edit_product_start(callback: CallbackQuery, state: FSMContext, product_repo: ProductRepository):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_id = callback.data.split(":")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id)
    await state.set_state(ProductManagement.edit_product_name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
    product = await product_repo.get_product(product_id)
    
    if not product:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_products_management_keyboard(),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{product.name}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode=ParseMode.HTML
    )
    
    await callback.answer()


@router.message(ProductManagement.edit_product_name)
async def process_edit_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_products_management_keyboard()
        )
        return
    
    product_name = message.text.strip()
    
    if not product_name:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(new_product_name=product_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏—è
    await state.set_state(ProductManagement.edit_product_description)
    
    await message.answer(
        "üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: –æ–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )


@router.message(ProductManagement.edit_product_description)
async def process_edit_product_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_products_management_keyboard()
        )
        return
    
    product_description = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.update_data(new_product_description=product_description)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ü–µ–Ω—ã
    await state.set_state(ProductManagement.edit_product_price)
    
    await message.answer(
        "üí∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: —Ü–µ–Ω–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>100</code> –∏–ª–∏ <code>99.99</code>\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )


@router.message(ProductManagement.edit_product_price)
async def process_edit_product_price(message: Message, state: FSMContext, product_repo: ProductRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_products_management_keyboard()
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—à–ª–∏ –ª–∏ –º—ã —Å—é–¥–∞ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã –≤ –∑–≤–µ–∑–¥–∞—Ö
        data = await state.get_data()
        if data.get("product_id") and data.get("set_stars_price"):
            stars_price = int(message.text.strip())
            if stars_price <= 0:
                await message.answer("‚ùå –¶–µ–Ω–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º", parse_mode=ParseMode.HTML)
                return
            product = await product_repo.get_product(data.get("product_id"))
            if not product:
                await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode=ParseMode.HTML)
                await state.clear()
                return
            product.stars_enabled = True
            product.stars_price = stars_price
            await product_repo.update_product(product)
            await message.answer(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ –≤–∫–ª—é—á–µ–Ω–∞: <b>{stars_price} ‚≠ê</b>",
                reply_markup=get_admin_product_actions_keyboard(str(product.id)),
                parse_mode=ParseMode.HTML
            )
            await state.clear()
            return

        product_price = float(message.text.strip().replace(",", "."))
        
        if product_price <= 0:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        product_id = data.get("product_id")
        new_product_name = data.get("new_product_name")
        new_product_description = data.get("new_product_description")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
        product = await product_repo.get_product(product_id)
        
        if not product:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                parse_mode=ParseMode.HTML
            )
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        old_name = product.name
        old_description = product.description
        old_price = product.price
        
        product.name = new_product_name
        product.description = new_product_description
        product.price = product_price
        
        await product_repo.update_product(product)
        
        await message.answer(
            "‚úÖ <b>–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n"
            f"–ë—ã–ª–æ: {old_name}\n"
            f"–°—Ç–∞–ª–æ: {product.name}\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            f"–ë—ã–ª–æ: {old_description or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"–°—Ç–∞–ª–æ: {product.description or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"<b>–¶–µ–Ω–∞:</b>\n"
            f"–ë—ã–ª–æ: {old_price:.2f}‚ÇΩ\n"
            f"–°—Ç–∞–ª–æ: {product.price:.2f}‚ÇΩ",
            reply_markup=get_admin_product_actions_keyboard(str(product.id)),
            parse_mode=ParseMode.HTML
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode=ParseMode.HTML
        )


@router.callback_query(F.data.startswith("admin:upload_image:"))
async def upload_image_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_id = callback.data.split(":")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id)
    await state.set_state(ProductManagement.upload_image)
    
    await callback.message.edit_text(
        "üñº <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("admin:set_instruction:"))
async def set_instruction_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"""
    product_id = callback.data.split(":")[-1]
    await state.update_data(product_id=product_id)
    await state.set_state(ProductManagement.edit_product_instruction)
    await callback.message.edit_text(
        "üìñ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É (URL) –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin:stars:on:"))
async def stars_on_start(callback: CallbackQuery, state: FSMContext, product_repo: ProductRepository):
    product_id = callback.data.split(":")[-1]
    await state.update_data(product_id=product_id, set_stars_price=True)
    await state.set_state(ProductManagement.edit_product_price)
    await callback.message.edit_text(
        "‚ú® <b>–í–∫–ª—é—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ –∑–≤–µ–∑–¥–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin:stars:off:"))
async def stars_off(callback: CallbackQuery, product_repo: ProductRepository):
    product_id = callback.data.split(":")[-1]
    product = await product_repo.get_product(product_id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    product.stars_enabled = False
    product.stars_price = None
    await product_repo.update_product(product)
    await callback.message.edit_text(
        "‚ú® –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞",
        reply_markup=get_admin_product_actions_keyboard(str(product.id))
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin:delete_product:"))
async def delete_product_confirm(callback: CallbackQuery, state: FSMContext, product_repo: ProductRepository):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
    product_id = callback.data.split(":")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id)
    await state.set_state(ProductManagement.delete_product_confirm)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
    product = await product_repo.get_product(product_id)
    
    if not product:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_products_management_keyboard(),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin:delete_product_confirm:{product_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"admin:product:{product_id}")
    )
    
    await callback.message.edit_text(
        f"‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä <b>{product.name}</b>?\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
        f"üí∞ –¶–µ–Ω–∞: {product.price:.2f}‚ÇΩ\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.quantity} —à—Ç.\n"
        f"üìä –ü—Ä–æ–¥–∞–Ω–æ: {product.sales_count} —à—Ç.\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=kb.as_markup(),
        parse_mode=ParseMode.HTML
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("admin:delete_product_confirm:"))
async def delete_product_process(callback: CallbackQuery, state: FSMContext, product_repo: ProductRepository, product_item_repo: ProductItemRepository):
    """–ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
    product_id = callback.data.split(":")[-1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
        product = await product_repo.get_product(product_id)
        
        if not product:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_products_management_keyboard(),
                parse_mode=ParseMode.HTML
            )
            await callback.answer()
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        product_name = product.name
        product_price = product.price
        product_quantity = product.quantity
        product_sales = product.sales_count
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
        await product_item_repo.delete_items_by_product(product_id)
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
        result = await product_repo.delete_product(product_id)
        
        if result:
            await callback.message.edit_text(
                "‚úÖ <b>–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω</b>\n\n"
                f"–¢–æ–≤–∞—Ä <b>{product_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n\n"
                f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
                f"üí∞ –¶–µ–Ω–∞: {product_price:.2f}‚ÇΩ\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product_quantity} —à—Ç.\n"
                f"üìä –ü—Ä–æ–¥–∞–Ω–æ: {product_sales} —à—Ç.\n\n"
                "–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Ç–∞–∫–∂–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.",
                reply_markup=get_products_management_keyboard(),
                parse_mode=ParseMode.HTML
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä.",
                reply_markup=get_products_management_keyboard(),
                parse_mode=ParseMode.HTML
            )
        
        await callback.answer()
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            reply_markup=get_products_management_keyboard(),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
        await state.clear()

@router.message(ProductManagement.edit_product_instruction)
async def set_instruction_process(message: Message, state: FSMContext, product_repo: ProductRepository):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_products_management_keyboard())
        return
    data = await state.get_data()
    product_id = data.get("product_id")
    if not product_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ç–æ–≤–∞—Ä–∞", parse_mode=ParseMode.HTML)
        await state.clear()
        return
    url = message.text.strip()
    product = await product_repo.get_product(product_id)
    if not product:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode=ParseMode.HTML)
        await state.clear()
        return
    product.instruction_link = url
    await product_repo.update_product(product)
    await message.answer(
        "‚úÖ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>",
        reply_markup=get_admin_product_actions_keyboard(str(product.id)),
        parse_mode=ParseMode.HTML
    )
    await state.clear()

@router.message(ProductManagement.upload_image, F.photo)
async def process_upload_image(message: Message, state: FSMContext, product_repo: ProductRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_products_management_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get("product_id")
    
    if not product_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ –Ω–∞–π–¥–µ–Ω ID —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
        product = await product_repo.get_product(product_id)
        
        if not product:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                parse_mode=ParseMode.HTML
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –≤ CDN
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
        product.image_url = photo.file_id
        await product_repo.update_product(product)
        
        await message.answer(
            "‚úÖ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</b>\n\n"
            f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–æ–≤–∞—Ä—É <b>{product.name}</b>.\n\n"
            "–í –±—É–¥—É—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ CDN.",
            reply_markup=get_admin_product_actions_keyboard(str(product.id)),
            parse_mode=ParseMode.HTML
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()


@router.message(ProductManagement.upload_image)
async def process_upload_image_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    await message.answer(
        "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )