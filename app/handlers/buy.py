from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from loguru import logger
import uuid

from app.database.repositories import UserRepository, ProductRepository, TransactionRepository, ProductItemRepository
from app.database.models import Transaction
from app.keyboards import (
    get_products_keyboard,
    get_product_actions_keyboard,
    get_payment_method_keyboard,
    get_confirm_purchase_keyboard,
    get_user_product_actions_keyboard,
)
from app.states.user_states import BuyProduct
from app.services.crypto_pay_service import CryptoPayService
from app.services.settings_service import SettingsService
from app.config import Config
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import LabeledPrice, PreCheckoutQuery


router = Router()


@router.message(Command("buy"))
@router.message(F.text == "üõí –ö—É–ø–∏—Ç—å")
async def cmd_buy(message: Message, product_repo: ProductRepository, config: Config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫—É–ø–∫–∏"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø–æ–∫—É–ø–∫–∏
    if not config.mode.purchases_enabled:
        await message.answer("‚ùå <b>–ü–æ–∫—É–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode=ParseMode.HTML)
        return
    
    try:
        products = await product_repo.get_all_products(available_only=True)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        if not products:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–ª–µ–Ω–æ.", parse_mode=ParseMode.HTML)
            return
        
        keyboard = get_products_keyboard(products)
        logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {keyboard}")
        
        await message.answer(
            "üõí <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</b>",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–∫—É–ø–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=ParseMode.HTML)





@router.callback_query(F.data.startswith("product:"))
async def show_product(callback: CallbackQuery, product_repo: ProductRepository):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
    product_id = callback.data.split(":")[1]
    product = await product_repo.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö HTML-—Ç–µ–≥–æ–≤
    import re
    clean_description = product.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    if clean_description != '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML-—Ç–µ–≥–∏
        clean_description = re.sub(r'<[^>]+>', '', clean_description)
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        clean_description = clean_description.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    text = (
        f"üì¶ {product.name}\n\n"
        f"{clean_description}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {product.price:.2f}‚ÇΩ\n"
        f"üî¢ –í –Ω–∞–ª–∏—á–∏–∏: {product.quantity} —à—Ç."
    )
    
    # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if product.image_url:
        try:
            await callback.message.answer_photo(
                photo=product.image_url,
                caption=text,
                reply_markup=get_user_product_actions_keyboard(str(product.id), bool(product.stars_enabled and product.stars_price)),
                parse_mode=ParseMode.HTML
            )
            await callback.message.delete()
        except TelegramBadRequest as e:
            # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π file_id/URL ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –±–µ–∑ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å
            logger.error(
                f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ {product.id}: {e}. image_url={product.image_url}"
            )
            try:
                await callback.message.edit_text(
                    text=text,
                    reply_markup=get_user_product_actions_keyboard(str(product.id), bool(product.stars_enabled and product.stars_price)),
                    parse_mode=ParseMode.HTML
                )
            except TelegramBadRequest:
                await callback.message.answer(
                    text,
                    reply_markup=get_user_product_actions_keyboard(str(product.id), bool(product.stars_enabled and product.stars_price)),
                    parse_mode=ParseMode.HTML
                )
    else:
        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_user_product_actions_keyboard(str(product.id), bool(product.stars_enabled and product.stars_price)),
                parse_mode=ParseMode.HTML
            )
        except TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ show_product: {e}")
            await callback.message.answer(
                text=text,
                reply_markup=get_user_product_actions_keyboard(str(product.id), bool(product.stars_enabled and product.stars_price)),
                parse_mode=ParseMode.HTML
            )
            try:
                await callback.message.delete()
            except TelegramBadRequest:
                pass
    
    await callback.answer()


@router.callback_query(F.data.startswith("buy_stars:"))
async def start_purchase_stars(callback: CallbackQuery, product_repo: ProductRepository, user_repo: UserRepository):
    """–ù–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏ –∑–∞ –ó–≤–µ–∑–¥—ã Telegram (UI-—á–∞—Å—Ç—å). –§–∞–∫—Ç–∏—á–µ—Å–∫—É—é –æ–ø–ª–∞—Ç—É –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ Bot API Stars UI."""
    product_id = callback.data.split(":")[1]
    product = await product_repo.get_product(product_id)
    if not product or not (product.stars_enabled and product.stars_price):
        await callback.answer("–û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    try:
        await callback.message.edit_text(
            f"‚ú® <b>–ü–æ–∫—É–ø–∫–∞ –∑–∞ –∑–≤–µ–∑–¥—ã</b>\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: <b>{product.name}</b>\n"
            f"‚ú® –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{int(product.stars_price)} ‚≠ê</b>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –∑–∞ –∑–≤–µ–∑–¥—ã' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ú® –ö—É–ø–∏—Ç—å –∑–∞ –∑–≤–µ–∑–¥—ã", callback_data=f"buy_stars_confirm:{product.id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"product:{product.id}")]
            ]),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ start_purchase_stars: {e}")
        await callback.message.answer(
            f"‚ú® <b>–ü–æ–∫—É–ø–∫–∞ –∑–∞ –∑–≤–µ–∑–¥—ã</b>\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: <b>{product.name}</b>\n"
            f"‚ú® –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{int(product.stars_price)} ‚≠ê</b>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –∑–∞ –∑–≤–µ–∑–¥—ã' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ú® –ö—É–ø–∏—Ç—å –∑–∞ –∑–≤–µ–∑–¥—ã", callback_data=f"buy_stars_confirm:{product.id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"product:{product.id}")]
            ]),
            parse_mode=ParseMode.HTML
        )
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
    await callback.answer()


@router.callback_query(F.data.startswith("buy_stars_confirm:"))
async def create_stars_invoice(
    callback: CallbackQuery,
    product_repo: ProductRepository,
    transaction_repo: TransactionRepository,
):
    """–°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ (Bot API, currency=XTR)."""
    product_id = callback.data.split(":")[1]
    product = await product_repo.get_product(product_id)
    if not product or not (product.stars_enabled and product.stars_price):
        await callback.answer("–û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é pending (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
    from uuid import uuid4
    receipt_id = f"{uuid4().hex[:16]}"
    transaction = await transaction_repo.create_transaction(
        user_id=callback.from_user.id,
        amount=product.price,
        transaction_type="purchase",
        status="pending",
        payment_method="stars",
        product_id=product_id,
        receipt_id=receipt_id,
    )
    payload = f"stars:{product_id}:{transaction.id}"
    title = product.name[:32]
    # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ –≤ show_product
    import re
    clean_description = product.description or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    if clean_description != "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
        clean_description = re.sub(r"<[^>]+>", "", clean_description)
    try:
        await callback.message.answer_invoice(
            title=title or "–¢–æ–≤–∞—Ä",
            description=clean_description[:255],
            payload=payload,
            provider_token="",  # –¥–ª—è XTR –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            currency="XTR",
            prices=[LabeledPrice(label=product.name[:32] or "–¢–æ–≤–∞—Ä", amount=int(product.stars_price))],
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ Stars: {e}")
        await callback.message.answer(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–≤–µ–∑–¥–∞–º–∏</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É —Å –±–∞–ª–∞–Ω—Å–∞.",
            parse_mode=ParseMode.HTML,
        )
        await callback.answer()


@router.pre_checkout_query()
async def on_pre_checkout(pre_checkout_query: PreCheckoutQuery, transaction_repo: TransactionRepository):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º pre-checkout –¥–ª—è Stars –∏–Ω–≤–æ–π—Å–æ–≤."""
    try:
        if pre_checkout_query.invoice_payload and pre_checkout_query.invoice_payload.startswith("stars:"):
            await pre_checkout_query.answer(ok=True)
        else:
            await pre_checkout_query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pre_checkout: {e}")
        try:
            await pre_checkout_query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
        except Exception:
            pass


@router.message(F.successful_payment)
async def on_successful_payment(
    message: Message,
    product_repo: ProductRepository,
    transaction_repo: TransactionRepository,
    product_item_repo: ProductItemRepository,
    user_repo: UserRepository,
):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞ –∑–≤–µ–∑–¥—ã: –≤—ã–¥–∞—á–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏ —á–µ–∫."""
    sp = message.successful_payment
    payload = sp.invoice_payload or ""
    try:
        if not payload.startswith("stars:"):
            return
        _, product_id, transaction_id = payload.split(":")
        product = await product_repo.get_product(product_id)
        transaction = await transaction_repo.get_transaction(transaction_id)
        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode=ParseMode.HTML)
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if transaction and transaction.status != "completed":
            transaction.status = "completed"
            await transaction_repo.update_transaction(transaction)
        # –í—ã–±–∏—Ä–∞–µ–º –∏ –ø–æ–º–µ—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        available_items = await product_item_repo.get_available_items(product_id)
        receipt_id = transaction.receipt_id if transaction and transaction.receipt_id else sp.telegram_payment_charge_id
        data_block = ""
        if available_items:
            item = available_items[0]
            await product_item_repo.mark_as_sold(item.id, message.from_user.id, receipt_id=receipt_id)
            await product_item_repo.update_product_quantity_from_items(product_id)
            # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∞ –≤ —á–µ–∫–µ ‚Äî –∫—Ä–∞—Å–∏–≤–æ –≤ –∫–æ–¥-–±–ª–æ–∫–µ
            data_block = f"üì¶ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n<code>{item.data}</code>\n\n"
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        await product_repo.increment_sales(product_id)
        await user_repo.increment_purchases(message.from_user.id)
        # –ß–µ–∫
        receipt_text = (
            f"üßæ <b>–ß–µ–∫ #{receipt_id}</b>\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: <b>{product.name}</b>\n"
            f"‚ú® –°—É–º–º–∞: <b>{int(product.stars_price)} ‚≠ê</b>\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: <b>–û–ø–ª–∞—á–µ–Ω–æ –∑–≤–µ–∑–¥–∞–º–∏</b>\n\n"
        )
        if product.description:
            import re
            clean_description = re.sub(r"<[^>]+>", "", product.description)
            clean_description = (
                clean_description.replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;")
            )
            receipt_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n{clean_description}\n\n"
        receipt_text += data_block
        if product.instruction_link:
            receipt_text += f"üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b> <a href='{product.instruction_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</a>\n\n"
        await message.answer(receipt_text + "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! ‚ú®", parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã Stars: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏", parse_mode=ParseMode.HTML)


@router.callback_query(F.data == "products:list")
async def back_to_products(callback: CallbackQuery, product_repo: ProductRepository):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    products = await product_repo.get_all_products(available_only=True)
    
    try:
        await callback.message.edit_text(
            "üõí <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</b>",
            reply_markup=get_products_keyboard(products),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ),
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ back_to_products: {e}")
        await callback.message.answer(
            "üõí <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</b>",
            reply_markup=get_products_keyboard(products),
            parse_mode=ParseMode.HTML
        )
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ back_to_products: {e}")
        await callback.message.answer(
            "üõí <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</b>",
            reply_markup=get_products_keyboard(products),
            parse_mode=ParseMode.HTML
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("buy:"))
async def start_purchase(callback: CallbackQuery, state: FSMContext, product_repo: ProductRepository, user_repo: UserRepository):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏"""
    product_id = callback.data.split(":")[1]
    product = await product_repo.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if product.quantity <= 0:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    user = await user_repo.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if user.balance < product.price:
        try:
            await callback.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
                f"üí∞ –¶–µ–Ω–∞: {product.price:.2f}‚ÇΩ\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f}‚ÇΩ\n\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {product.price - user.balance:.2f}‚ÇΩ",
                reply_markup=get_products_keyboard([]),
                parse_mode=ParseMode.HTML
            )
        except TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
            await callback.message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
                f"üí∞ –¶–µ–Ω–∞: {product.price:.2f}‚ÇΩ\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f}‚ÇΩ\n\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {product.price - user.balance:.2f}‚ÇΩ",
                reply_markup=get_products_keyboard([]),
                parse_mode=ParseMode.HTML
            )
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                await callback.message.delete()
            except TelegramBadRequest:
                pass
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data=f"confirm_purchase:{product_id}"))
    kb.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_purchase"))
    
    try:
        await callback.message.edit_text(
            f"üõí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
            f"üí∞ –¶–µ–Ω–∞: {product.price:.2f}‚ÇΩ\n"
            f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f}‚ÇΩ\n"
            f"üí≥ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {user.balance - product.price:.2f}‚ÇΩ\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:",
            reply_markup=kb.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ start_purchase: {e}")
        await callback.message.answer(
            f"üõí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
            f"üí∞ –¶–µ–Ω–∞: {product.price:.2f}‚ÇΩ\n"
            f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f}‚ÇΩ\n"
            f"üí≥ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {user.balance - product.price:.2f}‚ÇΩ\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:",
            reply_markup=kb.as_markup(),
            parse_mode=ParseMode.HTML
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_purchase:"))
async def confirm_purchase(callback: CallbackQuery, product_repo: ProductRepository, user_repo: UserRepository, transaction_repo: TransactionRepository, product_item_repo: ProductItemRepository):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Å –±–∞–ª–∞–Ω—Å–∞"""
    product_id = callback.data.split(":")[1]
    product = await product_repo.get_product(product_id)
    user = await user_repo.get_user(callback.from_user.id)
    
    if not product or not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if product.quantity <= 0:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
        return
    
    if user.balance < product.price:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏
        import uuid
        receipt_id = f"{uuid.uuid4().hex[:16]}"
        
        transaction = await transaction_repo.create_transaction(
            user_id=callback.from_user.id,
            amount=product.price,
            transaction_type="purchase",
            status="completed",
            payment_method="balance",
            product_id=product_id,
            receipt_id=receipt_id
        )
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
        await user_repo.update_balance(callback.from_user.id, -product.price)
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        await product_repo.update_quantity(product_id, -1)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–∞
        await product_repo.increment_sales(product_id)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user_repo.increment_purchases(callback.from_user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–µ
        receipt_text = (
            f"üßæ –ß–µ–∫ #{transaction.receipt_id}\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
            f"üí∞ –°—É–º–º–∞: {transaction.amount:.2f}‚ÇΩ\n"
            f"üìÖ –î–∞—Ç–∞: {transaction.created_at.strftime('%d.%m.%Y %H:%M:%S')}\n\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞\n\n"
        )
        
        # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —á–µ–∫
        if product.description:
            # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö HTML-—Ç–µ–≥–æ–≤
            import re
            clean_description = re.sub(r'<[^>]+>', '', product.description)
            clean_description = clean_description.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            receipt_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n{clean_description}\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
        available_items = await product_item_repo.get_available_items(product_id)
        
        if available_items:
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            item = available_items[0]
            
            # –ü–æ–º–µ—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—É—é –∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å —á–µ–∫–æ–º
            await product_item_repo.mark_as_sold(item.id, callback.from_user.id, receipt_id=transaction.receipt_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
            await product_item_repo.update_product_quantity_from_items(product_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ —á–µ–∫
            receipt_text += f"üì¶ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n<code>{item.data}</code>\n\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            if product.instruction_link:
                receipt_text += f"üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b> <a href='{product.instruction_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</a>\n\n"
        
        try:
            await callback.message.edit_text(
                receipt_text + "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ",
                parse_mode=ParseMode.HTML
            )
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ confirm_purchase: {e}")
            await callback.message.answer(
                receipt_text + "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ",
                parse_mode=ParseMode.HTML
            )
        
        await callback.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ", show_alert=True)


@router.callback_query(F.data == "cancel_purchase")
async def cancel_purchase(callback: CallbackQuery, product_repo: ProductRepository):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏"""
    products = await product_repo.get_all_products(available_only=True)
    
    try:
        await callback.message.edit_text(
            "‚ùå <b>–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.",
            reply_markup=get_products_keyboard(products),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ cancel_purchase: {e}")
        await callback.message.answer(
            "‚ùå <b>–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.",
            reply_markup=get_products_keyboard(products),
            parse_mode=ParseMode.HTML
        )
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
    
    await callback.answer()


@router.callback_query(BuyProduct.select_payment_method, F.data.startswith("pay:crypto:"))
async def crypto_payment(
    callback: CallbackQuery, 
    state: FSMContext, 
    config: Config, 
    product_repo: ProductRepository,
    user_repo: UserRepository,
    transaction_repo: TransactionRepository
):
    """–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get("product_id")
    product_name = data.get("product_name")
    product_price = data.get("product_price")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
    product = await product_repo.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.clear()
        return
    
    if product.quantity <= 0:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
    crypto = callback.data.split(":")[-1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ Crypto Pay
    settings_service = SettingsService()
    crypto_pay_token = await settings_service.get_crypto_pay_token()
    
    if not crypto_pay_token:
        try:
            await callback.message.edit_text(
                "‚ùå <b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_payment_method_keyboard(),
                parse_mode=ParseMode.HTML
            )
        except TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Crypto Pay: {e}")
            await callback.message.answer(
                "‚ùå <b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_payment_method_keyboard(),
                parse_mode=ParseMode.HTML
            )
            try:
                await callback.message.delete()
            except TelegramBadRequest:
                pass
        await callback.answer()
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Crypto Pay
        crypto_pay = CryptoPayService(
            api_token=crypto_pay_token,
            testnet=config.payment.crypto_pay_testnet
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —á–µ–∫–∞
        receipt_id = f"{uuid.uuid4().hex[:16]}"
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        transaction = await transaction_repo.create_transaction(
            user_id=callback.from_user.id,
            amount=product_price,
            transaction_type="purchase",
            status="pending",
            payment_method=f"crypto_{crypto.lower()}",
            product_id=product_id,
            receipt_id=receipt_id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(transaction_id=str(transaction.id))
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ Crypto Pay
        invoice = await crypto_pay.create_invoice(
            amount=product_price,
            asset=crypto,
            description=f"–ü–æ–∫—É–ø–∫–∞ {product_name}",
            payload=str(transaction.id),
            allow_comments=False,
            allow_anonymous=False
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å ID –ø–ª–∞—Ç–µ–∂–∞
        transaction.payment_id = invoice.get("invoice_id")
        await transaction_repo.update_transaction(transaction)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω–≤–æ–π—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(invoice_id=invoice.get("invoice_id"))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        pay_url = invoice.get("pay_url")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –æ–ø–ª–∞—Ç—ã
        await state.set_state(BuyProduct.waiting_payment)
        
        try:
            await callback.message.edit_text(
                f"üí∞ <b>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</b>\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä: <b>{product_name}</b>\n"
                f"üí∞ –°—É–º–º–∞: <b>{product_price:.2f}‚ÇΩ</b>\n"
                f"üí± –í–∞–ª—é—Ç–∞: <b>{crypto}</b>\n\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href='{pay_url}'>—Å—Å—ã–ª–∫–µ</a> –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.\n\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{receipt_id}</code>",
                reply_markup=get_confirm_purchase_keyboard(),
                parse_mode=ParseMode.HTML
            )
        except TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
            await callback.message.answer(
                f"üí∞ <b>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</b>\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä: <b>{product_name}</b>\n"
                f"üí∞ –°—É–º–º–∞: <b>{product_price:.2f}‚ÇΩ</b>\n"
                f"üí± –í–∞–ª—é—Ç–∞: <b>{crypto}</b>\n\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href='{pay_url}'>—Å—Å—ã–ª–∫–µ</a> –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.\n\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{receipt_id}</code>",
                reply_markup=get_confirm_purchase_keyboard(),
                parse_mode=ParseMode.HTML
            )
            try:
                await callback.message.delete()
            except TelegramBadRequest:
                pass
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        try:
            await callback.message.edit_text(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                reply_markup=get_payment_method_keyboard(),
                parse_mode=ParseMode.HTML
            )
        except TelegramBadRequest as edit_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {edit_error}")
            await callback.message.answer(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                reply_markup=get_payment_method_keyboard(),
                parse_mode=ParseMode.HTML
            )
            try:
                await callback.message.delete()
            except TelegramBadRequest:
                pass
        await callback.answer()


@router.callback_query(BuyProduct.select_payment_method, F.data.startswith("pay:card:"))
async def card_payment(callback: CallbackQuery, state: FSMContext):
    """–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π"""
    # –í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
    await callback.message.edit_text(
        "‚ùå <b>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        reply_markup=get_payment_method_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(BuyProduct.select_payment_method, F.data == "pay:cancel")
async def cancel_payment(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã"""
    await state.clear()
    
    try:
        await callback.message.edit_text(
            "‚ùå <b>–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.",
            reply_markup=get_products_keyboard([]),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ cancel_payment: {e}")
        await callback.message.answer(
            "‚ùå <b>–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.",
            reply_markup=get_products_keyboard([]),
            parse_mode=ParseMode.HTML
        )
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
    
    await callback.answer()


@router.callback_query(BuyProduct.waiting_payment, F.data.startswith("confirm:"))
async def check_payment(
    callback: CallbackQuery, 
    state: FSMContext, 
    config: Config, 
    product_repo: ProductRepository,
    transaction_repo: TransactionRepository,
    user_repo: UserRepository,
    product_item_repo: ProductItemRepository
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    transaction_id = data.get("transaction_id")
    invoice_id = data.get("invoice_id")
    product_id = data.get("product_id")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction = await transaction_repo.get_transaction(transaction_id)
    
    if not transaction:
        await callback.answer("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
    product = await product_repo.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    settings_service = SettingsService()
    crypto_pay_token = await settings_service.get_crypto_pay_token()
    
    if not crypto_pay_token:
        await callback.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", show_alert=True)
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Crypto Pay
        crypto_pay = CryptoPayService(
            api_token=crypto_pay_token,
            testnet=config.payment.crypto_pay_testnet
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–æ–π—Å–µ
        invoices = await crypto_pay.get_invoices(invoice_ids=[invoice_id])
        
        if not invoices:
            await callback.answer("‚ùå –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        invoice = invoices[0]
        status = invoice.get("status")
        
        if status == "paid":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction.status = "completed"
            await transaction_repo.update_transaction(transaction)
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
            await product_repo.update_quantity(product_id, -1)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–∞
            await product_repo.increment_sales(product_id)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user_repo.increment_purchases(callback.from_user.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–µ
            receipt_text = (
                f"üßæ <b>–ß–µ–∫ #{transaction.receipt_id}</b>\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä: <b>{product.name}</b>\n"
                f"üí∞ –°—É–º–º–∞: <b>{transaction.amount:.2f}‚ÇΩ</b>\n"
                f"üìÖ –î–∞—Ç–∞: {transaction.created_at.strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: <b>–û–ø–ª–∞—á–µ–Ω–æ</b>\n\n"
            )
            
            # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —á–µ–∫
            if product.description:
                # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö HTML-—Ç–µ–≥–æ–≤
                import re
                clean_description = re.sub(r'<[^>]+>', '', product.description)
                clean_description = clean_description.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                receipt_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n{clean_description}\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
            available_items = await product_item_repo.get_available_items(product_id)
            
            if available_items:
                # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                item = available_items[0]
                
                # –ü–æ–º–µ—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—É—é –∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å —á–µ–∫–æ–º
                await product_item_repo.mark_as_sold(item.id, callback.from_user.id, receipt_id=transaction.receipt_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
                await product_item_repo.update_product_quantity_from_items(product_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ —á–µ–∫
                receipt_text += f"üì¶ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n<code>{item.data}</code>\n\n"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                if product.instruction_link:
                    receipt_text += f"üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b> <a href='{product.instruction_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</a>\n\n"
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            try:
                await callback.message.edit_text(
                    receipt_text + "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ",
                    parse_mode=ParseMode.HTML
                )
            except TelegramBadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ check_payment: {e}")
                await callback.message.answer(
                    receipt_text + "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ",
                    parse_mode=ParseMode.HTML
                )
            
            await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", show_alert=True)
            
        elif status == "active":
            # –°—á–µ—Ç –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
            await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞", show_alert=True)
            
        else:
            # –°—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
            transaction.status = "canceled"
            await transaction_repo.update_transaction(transaction)
            
            try:
                await callback.message.edit_text(
                    "‚ùå <b>–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω</b>\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.",
                    reply_markup=get_products_keyboard([]),
                    parse_mode=ParseMode.HTML
                )
            except TelegramBadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ check_payment (canceled): {e}")
                await callback.message.answer(
                    "‚ùå <b>–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω</b>\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.",
                    reply_markup=get_products_keyboard([]),
                    parse_mode=ParseMode.HTML
                )
            
            await callback.answer()
            await state.clear()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã", show_alert=True)


@router.callback_query(F.data == "cancel")
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    current_state = await state.get_state()
    
    if current_state:
        await state.clear()
    
    try:
        await callback.message.edit_text(
            "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.",
            reply_markup=get_products_keyboard([]),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ cancel_operation: {e}")
        await callback.message.answer(
            "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.",
            reply_markup=get_products_keyboard([]),
            parse_mode=ParseMode.HTML
        )
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
    
    await callback.answer()