from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from loguru import logger

from app.filters.admin import AdminFilter
from app.states.admin_states import BalanceManagement
from app.database.repositories import UserRepository


router = Router()
router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())


@router.callback_query(F.data.startswith("admin:edit_balance:"))
async def edit_balance(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    user_id = int(callback.data.split(":")[-1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(user_id=user_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    await state.set_state(BalanceManagement.enter_new_balance)
    
    await callback.message.answer(
        "üí≥ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1000.50</code>).\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("admin:give_balance:"))
async def give_balance(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ give_balance —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    user_id = int(callback.data.split(":")[-1])
    logger.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞: {user_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(user_id=user_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –≤—ã–¥–∞—á–∏
    await state.set_state(BalanceManagement.enter_add_balance)
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ BalanceManagement.enter_add_balance")
    
    await callback.message.answer(
        "üí∞ <b>–í—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>500</code>).\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )
    
    await callback.answer()


@router.message(BalanceManagement.enter_new_balance)
async def process_new_balance(message: Message, state: FSMContext, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", parse_mode=ParseMode.HTML)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        new_balance = float(message.text.strip().replace(',', '.'))
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user_id = data.get("user_id")
        
        if not user_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", parse_mode=ParseMode.HTML)
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_repo.get_user(user_id)
        
        if not user:
            await message.answer(
                "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode=ParseMode.HTML
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ª–æ–≥–∞
        old_balance = user.balance
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        user.balance = new_balance
        await user_repo.update_user(user)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        await message.answer(
            "‚úÖ <b>–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
            f"–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: <b>{old_balance:.2f}‚ÇΩ</b>\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance:.2f}‚ÇΩ</b>",
            parse_mode=ParseMode.HTML
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å {old_balance:.2f}‚ÇΩ –Ω–∞ {new_balance:.2f}‚ÇΩ")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>1000.50</code>.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
            parse_mode=ParseMode.HTML
        )


@router.message(BalanceManagement.enter_add_balance)
async def process_add_balance(message: Message, state: FSMContext, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤—ã–¥–∞—á–∏"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ process_add_balance —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
    
    if message.text == "/cancel":
        await state.clear()
        await message.answer("‚ùå –í—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", parse_mode=ParseMode.HTML)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏
        add_amount = float(message.text.strip().replace(',', '.'))
        
        if add_amount <= 0:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞</b>\n\n"
                "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user_id = data.get("user_id")
        
        if not user_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", parse_mode=ParseMode.HTML)
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_repo.get_user(user_id)
        
        if not user:
            await message.answer(
                "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode=ParseMode.HTML
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ª–æ–≥–∞
        old_balance = user.balance
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        user.balance += add_amount
        await user_repo.update_user(user)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≤—ã–¥–∞—á–µ
        await message.answer(
            "‚úÖ <b>–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω</b>\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
            f"–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: <b>{old_balance:.2f}‚ÇΩ</b>\n"
            f"–í—ã–¥–∞–Ω–æ: <b>+{add_amount:.2f}‚ÇΩ</b>\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{user.balance:.2f}‚ÇΩ</b>",
            parse_mode=ParseMode.HTML
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤—ã–¥–∞–ª {add_amount:.2f}‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>500</code>.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
            parse_mode=ParseMode.HTML
        )


@router.callback_query(F.data == "admin:search_back")
async def back_to_search(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–∏—Å–∫—É"""
    from app.handlers.search import cmd_search
    await cmd_search(callback.message)
    await callback.answer()