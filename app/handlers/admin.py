from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ParseMode
import asyncio
from loguru import logger
from motor.motor_asyncio import AsyncIOMotorClient
import os
import html

from app.config import Config
from app.keyboards import (
    get_admin_settings_keyboard, 
    get_payment_settings_keyboard,
    get_products_management_keyboard,
    get_search_keyboard
)
from app.services.settings_service import SettingsService
from app.services.crypto_pay_service import CryptoPayService
from app.filters.admin import AdminFilter
from app.states.admin_states import TokenSettings, ProductManagement, UserSearch, Broadcast


router = Router()
router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())


@router.message(Command("settings"))
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def cmd_settings(message: Message, config: Config, settings_service: SettingsService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    config.mode.maintenance = await settings_service.get_maintenance_mode()
    config.mode.payments_enabled = await settings_service.get_payments_enabled()
    config.mode.purchases_enabled = await settings_service.get_purchases_enabled()
    
    await message.answer(
        "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
        f"üõ† –¢–µ—Ö. —Ä–∞–±–æ—Ç—ã: <b>{'–í–∫–ª—é—á–µ–Ω—ã' if config.mode.maintenance else '–í—ã–∫–ª—é—á–µ–Ω—ã'}</b>\n"
        f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{'–í–∫–ª—é—á–µ–Ω—ã' if config.mode.payments_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}</b>\n"
        f"üõí –ü–æ–∫—É–ø–∫–∏: <b>{'–í–∫–ª—é—á–µ–Ω—ã' if config.mode.purchases_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:",
        reply_markup=get_admin_settings_keyboard(
            config.mode.maintenance,
            config.mode.payments_enabled,
            config.mode.purchases_enabled
        ),
        parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data == "admin:refresh_settings")
async def refresh_settings(callback: CallbackQuery, config: Config, settings_service: SettingsService):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        config.mode.maintenance = await settings_service.get_maintenance_mode()
        config.mode.payments_enabled = await settings_service.get_payments_enabled()
        config.mode.purchases_enabled = await settings_service.get_purchases_enabled()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        new_text = (
            "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
            f"üõ† –¢–µ—Ö. —Ä–∞–±–æ—Ç—ã: <b>{'–í–∫–ª—é—á–µ–Ω—ã' if config.mode.maintenance else '–í—ã–∫–ª—é—á–µ–Ω—ã'}</b>\n"
            f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{'–í–∫–ª—é—á–µ–Ω—ã' if config.mode.payments_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}</b>\n"
            f"üõí –ü–æ–∫—É–ø–∫–∏: <b>{'–í–∫–ª—é—á–µ–Ω—ã' if config.mode.purchases_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        new_markup = get_admin_settings_keyboard(
            config.mode.maintenance,
            config.mode.payments_enabled,
            config.mode.purchases_enabled
        )
        
        try:
            # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                new_text,
                reply_markup=new_markup,
                parse_mode=ParseMode.HTML
            )
            await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except TelegramBadRequest as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –±–µ–∑ –æ—à–∏–±–∫–∏
            if "message is not modified" in str(e):
                await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            else:
                # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
                raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@router.callback_query(F.data == "admin:toggle_maintenance")
async def toggle_maintenance(callback: CallbackQuery, config: Config, settings_service: SettingsService):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç"""
    new_value = not config.mode.maintenance
    await settings_service.set_maintenance_mode(new_value)
    config.mode.maintenance = new_value
    
    status = "–≤–∫–ª—é—á–µ–Ω" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω"
    await callback.answer(f"–†–µ–∂–∏–º —Ç–µ—Ö. —Ä–∞–±–æ—Ç {status}")
    
    await refresh_settings(callback, config, settings_service)


@router.callback_query(F.data == "admin:toggle_payments")
async def toggle_payments(callback: CallbackQuery, config: Config, settings_service: SettingsService):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"""
    new_value = not config.mode.payments_enabled
    await settings_service.set_payments_enabled(new_value)
    config.mode.payments_enabled = new_value
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    await callback.answer(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è {status}")
    
    await refresh_settings(callback, config, settings_service)


@router.callback_query(F.data == "admin:toggle_purchases")
async def toggle_purchases(callback: CallbackQuery, config: Config, settings_service: SettingsService):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–æ–∫"""
    new_value = not config.mode.purchases_enabled
    await settings_service.set_purchases_enabled(new_value)
    config.mode.purchases_enabled = new_value
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    await callback.answer(f"–ü–æ–∫—É–ø–∫–∏ {status}")
    
    await refresh_settings(callback, config, settings_service)


@router.callback_query(F.data == "admin:logs")
async def show_logs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
        log_files = {
            "errors.log": "–õ–æ–≥–∏ –æ—à–∏–±–æ–∫",
            "info.log": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ª–æ–≥–∏",
            "bot.log": "–ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏"
        }
        
        available_logs = []
        for file_name, description in log_files.items():
            log_path = os.path.join("logs", file_name)
            if os.path.exists(log_path):
                available_logs.append((log_path, description))
        
        if not available_logs:
            await callback.answer("–§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: errors.log, info.log, bot.log)
        log_path, description = available_logs[0]
        
        with open(log_path, "r", encoding="utf-8") as f:
            logs = f.readlines()[-15:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã HTML
        escaped_logs = [html.escape(line) for line in logs]
        
        log_text = f"üìä <b>{description}:</b>\n\n"
        log_text += "<pre>" + "".join(escaped_logs) + "</pre>"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(log_text) > 4000:
            log_text = log_text[:3990] + "...</pre>"
        
        await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –ª–æ–≥–∏")
        await callback.message.answer(log_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤", show_alert=True)


@router.callback_query(F.data == "admin:back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await callback.message.delete()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º

@router.callback_query(F.data == "admin:payment_settings")
async def payment_settings(callback: CallbackQuery, config: Config, settings_service: SettingsService):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
    crypto_pay_token = await settings_service.get_crypto_pay_token()
    crypto_pay_testnet = await settings_service.get_crypto_pay_testnet()
    config.payment.crypto_pay_testnet = crypto_pay_testnet
    
    crypto_pay_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if crypto_pay_token else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    await callback.message.edit_text(
        "üí∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º</b>\n\n"
        f"ü™ô Crypto Pay: <b>{crypto_pay_status}</b>\n"
        f"üß™ –†–µ–∂–∏–º: <b>{'–¢–µ—Å—Ç–æ–≤—ã–π' if config.payment.crypto_pay_testnet else '–ë–æ–µ–≤–æ–π'}</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º:",
        reply_markup=get_payment_settings_keyboard(),
        parse_mode=ParseMode.HTML
    )
    
    await callback.answer()


@router.callback_query(F.data == "admin:delete_crypto_pay_token")
async def delete_crypto_pay_token(callback: CallbackQuery, settings_service: SettingsService):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Crypto Pay (–≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ—Å—Ç/–±–æ–µ–≤–æ–π)"""
    await settings_service.set_crypto_pay_token("")
    await callback.answer("–¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω")
    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
    config = callback.bot['config'] if 'config' in callback.bot else None
    from app.services.settings_service import SettingsService as _S
    ss = _S()
    if config:
        await payment_settings(callback, config, ss)


@router.callback_query(F.data == "admin:back_to_settings")
async def back_to_settings(callback: CallbackQuery, config: Config, settings_service: SettingsService):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    await refresh_settings(callback, config, settings_service)
    await callback.answer()


@router.callback_query(F.data == "admin:setup_crypto_pay")
async def setup_crypto_pay(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ Crypto Pay"""
    await state.set_state(TokenSettings.enter_crypto_pay_token)
    
    await callback.message.edit_text(
        "ü™ô <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Crypto Pay</b>\n\n"
        "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Crypto Pay –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
        "1. –û—Ç–∫—Ä—ã—Ç—å @CryptoBot (–∏–ª–∏ @CryptoTestnetBot –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏)\n"
        "2. –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>Crypto Pay</b>\n"
        "3. –ù–∞–∂–∞—Ç—å <b>Create App</b>\n"
        "4. –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω\n\n"
        "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</b>\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )
    
    await callback.answer()


@router.message(TokenSettings.enter_crypto_pay_token)
async def process_crypto_pay_token(message: Message, state: FSMContext, config: Config, settings_service: SettingsService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ Crypto Pay"""
    token = message.text.strip()
    
    if token == "/cancel":
        await state.clear()
        await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Crypto Pay –æ—Ç–º–µ–Ω–µ–Ω–∞", parse_mode=ParseMode.HTML)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    if not token or ":" not in token:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞</b>\n\n"
            "–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–∞: <code>12345:AABBCCDDEEFFaabbccddeeff</code>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
    await settings_service.set_crypto_pay_token(token)
    config.payment.crypto_pay_token = token
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    await message.answer("‚úÖ <b>–¢–æ–∫–µ–Ω Crypto Pay —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>", parse_mode=ParseMode.HTML)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
        crypto_pay = CryptoPayService(
            api_token=token,
            testnet=config.payment.crypto_pay_testnet
        )
        
        # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        app_info = await crypto_pay.get_me()
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        await message.answer(
            "‚úÖ <b>–¢–æ–∫–µ–Ω Crypto Pay —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>\n\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:\n"
            f"- ID: <code>{app_info.get('app_id')}</code>\n"
            f"- –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{app_info.get('name')}</b>\n"
            f"- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: <b>{app_info.get('payment_processing_bot_username', '@CryptoBot')}</b>\n\n"
            f"–†–µ–∂–∏–º: <b>{'–¢–µ—Å—Ç–æ–≤—ã–π' if config.payment.crypto_pay_testnet else '–ë–æ–µ–≤–æ–π'}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Crypto Pay –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π.",
            parse_mode=ParseMode.HTML
        )
        
        logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Crypto Pay: {app_info.get('name')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ Crypto Pay: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        await message.answer(
            "‚ùå <b>–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            f"–û—à–∏–±–∫–∞: <code>{html.escape(str(e))}</code>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "- –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞\n"
            "- –¢–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω\n"
            "- –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API\n"
            "- –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∂–∏–º–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π/–±–æ–µ–≤–æ–π)\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º (—Ç–µ—Å—Ç–æ–≤—ã–π/–±–æ–µ–≤–æ–π) –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞—Ç–µ–∂–µ–π.",
            parse_mode=ParseMode.HTML
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(F.data == "admin:check_crypto_pay")
async def check_crypto_pay(callback: CallbackQuery, config: Config, settings_service: SettingsService):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Crypto Pay"""
    token = await settings_service.get_crypto_pay_token()
    crypto_pay_testnet = await settings_service.get_crypto_pay_testnet()
    config.payment.crypto_pay_testnet = crypto_pay_testnet
    
    if not token:
        await callback.answer("‚ùå –¢–æ–∫–µ–Ω Crypto Pay –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
        crypto_pay = CryptoPayService(
            api_token=token,
            testnet=config.payment.crypto_pay_testnet
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ getMe
        app_info = await crypto_pay.get_me()
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        await callback.message.edit_text(
            "‚úÖ <b>–¢–æ–∫–µ–Ω Crypto Pay —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>\n\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:\n"
            f"- ID: <code>{app_info.get('app_id')}</code>\n"
            f"- –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{app_info.get('name')}</b>\n"
            f"- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: <b>{app_info.get('payment_processing_bot_username', '@CryptoBot')}</b>\n\n"
            f"–†–µ–∂–∏–º: <b>{'–¢–µ—Å—Ç–æ–≤—ã–π' if config.payment.crypto_pay_testnet else '–ë–æ–µ–≤–æ–π'}</b>",
            reply_markup=get_payment_settings_keyboard(),
            parse_mode=ParseMode.HTML
        )
        
        logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Crypto Pay: {app_info.get('name')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ Crypto Pay: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ Crypto Pay</b>\n\n"
            f"–û—à–∏–±–∫–∞: <code>{html.escape(str(e))}</code>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "- –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞\n"
            "- –¢–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω\n"
            "- –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API\n"
            "- –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∂–∏–º–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π/–±–æ–µ–≤–æ–π)\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º (—Ç–µ—Å—Ç–æ–≤—ã–π/–±–æ–µ–≤–æ–π).",
            reply_markup=get_payment_settings_keyboard(),
            parse_mode=ParseMode.HTML
        )
    
    await callback.answer()