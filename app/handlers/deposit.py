import uuid
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from loguru import logger

from app.config import Config
from app.database.repositories import UserRepository
from app.services.crypto_pay_service import CryptoPayService
from app.services.settings_service import SettingsService


router = Router()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Å—É–º–º–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
def get_deposit_amounts_keyboard() -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—É–º–º–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    kb = InlineKeyboardBuilder()
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    amounts = [100, 250, 500, 1000, 2500, 5000]
    
    for amount in amounts:
        kb.add(InlineKeyboardButton(
            text=f"{amount} ‚ÇΩ",
            callback_data=f"deposit:{amount}"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    kb.add(InlineKeyboardButton(
        text="üîô –û—Ç–º–µ–Ω–∞",
        callback_data="deposit:cancel"
    ))
    
    kb.adjust(3)  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
    
    return kb


@router.message(Command("deposit"))
@router.message(F.text.lower().in_(["–ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "üí∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å"]))
async def cmd_deposit(message: Message, config: Config, settings_service: SettingsService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    if not config.mode.payments_enabled:
        await message.answer("‚ùå <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=ParseMode.HTML)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω Crypto Pay
    crypto_pay_token = await settings_service.get_crypto_pay_token()
    if not crypto_pay_token:
        await message.answer("‚ùå <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=ParseMode.HTML)
        return
    
    await message.answer(
        "üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=get_deposit_amounts_keyboard().as_markup(),
        parse_mode=ParseMode.HTML
    )


@router.message(lambda message: False)
async def process_custom_amount(message: Message, config: Config, settings_service: SettingsService, user_repo: UserRepository, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    current_state = await state.get_state()
    if current_state and "ProductManagement" in current_state:
        # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞
    if current_state and "BalanceManagement" in current_state:
        # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ BalanceManagement: {message.text}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    if not config.mode.payments_enabled:
        await message.answer("‚ùå <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=ParseMode.HTML)
        return
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
        amount = float(message.text.replace(',', '.'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < 10:
            await message.answer("‚ùå <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10 ‚ÇΩ</b>", parse_mode=ParseMode.HTML)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount > 100000:
            await message.answer("‚ùå <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100,000 ‚ÇΩ</b>", parse_mode=ParseMode.HTML)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Crypto Pay
        crypto_pay_token = await settings_service.get_crypto_pay_token()
        crypto_pay_testnet = await settings_service.get_crypto_pay_testnet()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Crypto Pay
        crypto_pay = CryptoPayService(
            api_token=crypto_pay_token,
            testnet=crypto_pay_testnet
        )
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payment_id = str(uuid.uuid4())
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–ª—è USDT
        try:
            exchange_rates = await crypto_pay.get_exchange_rates()
            usdt_rate = 1.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1:1
            
            # –ò—â–µ–º –∫—É—Ä—Å USDT –∫ RUB
            for rate in exchange_rates:
                if rate.get("source") == "USDT" and rate.get("target") == "RUB":
                    usdt_rate = float(rate.get("rate", 1.0))
                    break
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ USDT
            usdt_amount = amount / usdt_rate
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            usdt_amount = round(usdt_amount, 2)
            
            # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
            invoice = await crypto_pay.create_invoice(
                amount=usdt_amount,
                asset="USDT",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º USDT –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} ‚ÇΩ",
                hidden_message="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!",
                payload=f"{payment_id}:{message.from_user.id}:{amount}",
                allow_comments=True,
                allow_anonymous=False,
                expires_in=60 * 30  # 30 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
            kb = InlineKeyboardBuilder()
            kb.add(InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                url=invoice["bot_invoice_url"]
            ))
            kb.add(InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data=f"check_payment:{invoice['invoice_id']}"
            ))
            kb.add(InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="cancel_payment"
            ))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
            await message.answer(
                f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                f"–°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n"
                f"–ö –æ–ø–ª–∞—Ç–µ: <b>{usdt_amount} USDT</b>\n\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'.",
                reply_markup=kb.as_markup(),
                parse_mode=ParseMode.HTML
            )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {invoice['invoice_id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=ParseMode.HTML)
            
    except ValueError:
        await message.answer("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã</b>\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50", parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã: {e}")
        await message.answer("‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=ParseMode.HTML)


@router.callback_query(F.data.startswith("deposit:"))
async def process_deposit_amount(callback: CallbackQuery, config: Config, settings_service: SettingsService, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ callback_data
    amount_str = callback.data.split(":")[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if amount_str == "cancel":
        await callback.message.edit_text("‚ùå <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>", parse_mode=ParseMode.HTML)
        await callback.answer()
        return
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
        amount = float(amount_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < 10:
            await callback.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10 ‚ÇΩ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Crypto Pay
        crypto_pay_token = await settings_service.get_crypto_pay_token()
        crypto_pay_testnet = await settings_service.get_crypto_pay_testnet()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Crypto Pay
        crypto_pay = CryptoPayService(
            api_token=crypto_pay_token,
            testnet=crypto_pay_testnet
        )
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payment_id = str(uuid.uuid4())
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–ª—è USDT
        exchange_rates = await crypto_pay.get_exchange_rates()
        usdt_rate = 1.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1:1
        
        # –ò—â–µ–º –∫—É—Ä—Å USDT –∫ RUB
        for rate in exchange_rates:
            if rate.get("source") == "USDT" and rate.get("target") == "RUB":
                usdt_rate = float(rate.get("rate", 1.0))
                break
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ USDT
        usdt_amount = amount / usdt_rate
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        usdt_amount = round(usdt_amount, 2)
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
        invoice = await crypto_pay.create_invoice(
            amount=usdt_amount,
            asset="USDT",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º USDT –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} ‚ÇΩ",
            hidden_message="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!",
            payload=f"{payment_id}:{callback.from_user.id}:{amount}",
            allow_comments=True,
            allow_anonymous=False,
            expires_in=60 * 30  # 30 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(
            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
            url=invoice["bot_invoice_url"]
        ))
        kb.add(InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            callback_data=f"check_payment:{invoice['invoice_id']}"
        ))
        kb.add(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="cancel_payment"
        ))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
        await callback.message.edit_text(
            f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            f"–°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n"
            f"–ö –æ–ø–ª–∞—Ç–µ: <b>{usdt_amount} USDT</b>\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'.",
            reply_markup=kb.as_markup(),
            parse_mode=ParseMode.HTML
        )
        
        logger.info(f"–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {invoice['invoice_id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("check_payment:"))
async def check_payment_status(callback: CallbackQuery, config: Config, settings_service: SettingsService, user_repo: UserRepository):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    invoice_id = callback.data.split(":")[1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Crypto Pay
        crypto_pay_token = await settings_service.get_crypto_pay_token()
        crypto_pay_testnet = await settings_service.get_crypto_pay_testnet()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Crypto Pay
        crypto_pay = CryptoPayService(
            api_token=crypto_pay_token,
            testnet=crypto_pay_testnet
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ
        invoices = await crypto_pay.get_invoices(invoice_ids=[invoice_id])
        
        if not invoices.get("items"):
            await callback.answer("‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        invoice = invoices["items"][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞
        if invoice["status"] == "paid":
            # –°—á–µ—Ç –æ–ø–ª–∞—á–µ–Ω, –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
            payload_parts = invoice.get("payload", "").split(":")
            if len(payload_parts) != 3:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload: {invoice.get('payload')}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
                return
            
            _, user_id, amount = payload_parts
            user_id = int(user_id)
            amount = float(amount)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repo.get_user(user_id)
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_id}")
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
            user.balance += amount
            await user_repo.update_user(user)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
            await callback.message.edit_text(
                f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                f"–°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user.balance} ‚ÇΩ</b>\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!",
                parse_mode=ParseMode.HTML
            )
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} ‚ÇΩ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        elif invoice["status"] == "active":
            # –°—á–µ—Ç –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω, –æ–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
            await callback.answer("–°—á–µ—Ç –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç.", show_alert=True)
        else:
            # –°—á–µ—Ç –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
            await callback.message.edit_text(
                "‚ùå <b>–°—á–µ—Ç –∏—Å—Ç–µ–∫ –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.",
                parse_mode=ParseMode.HTML
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await callback.message.edit_text("‚ùå <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>", parse_mode=ParseMode.HTML)
    await callback.answer()