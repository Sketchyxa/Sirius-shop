from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from loguru import logger
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest

from app.database.repositories import UserRepository, ProductRepository, TransactionRepository, ProductItemRepository
from app.keyboards import get_main_keyboard
from app.filters.admin import AdminFilter
from app.config import Config


router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, user_repo: UserRepository, config: Config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = await user_repo.get_or_create_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = message.from_user.id in config.bot.admin_ids
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if is_admin and not user.is_admin:
        user.is_admin = True
        await user_repo.update_user(user)
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω Siriushop!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard(is_admin),
        parse_mode=ParseMode.HTML
    )


@router.message(Command("profile"))
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def cmd_profile(message: Message, user_repo: UserRepository, config: Config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ñ–∏–ª—è"""
    user = await user_repo.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode=ParseMode.HTML)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = message.from_user.id in config.bot.admin_ids
    admin_status = "‚úÖ –î–∞" if is_admin else "‚ùå –ù–µ—Ç"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üõí –ü–æ–∫—É–ø–∫–∏", callback_data="profile:purchases")
        ],
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="profile:refresh")
        ]
    ])
    
    await message.answer(
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: <code>{user.user_id}</code>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.balance:.2f}‚ÇΩ</b>\n"
        f"üõí –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{user.purchases}—à—Ç</b>\n"
        f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <b>{admin_status}</b>\n\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')} ({(datetime.now() - user.created_at).days} –¥–Ω–µ–π)",
        reply_markup=keyboard if is_admin else None,
        parse_mode=ParseMode.HTML
    )


@router.message(F.text == "üì¶ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤")
async def cmd_products(message: Message, product_repo: ProductRepository, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    products = await product_repo.get_all_products(available_only=True)
    if not products:
        await message.answer("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", parse_mode=ParseMode.HTML)
        return
    page = 1
    per_page = 10
    await state.update_data(products_page=page)
    total = len(products)
    items = products[(page-1)*per_page: page*per_page]
    text = "\n".join([f"‚Ä¢ <b>{p.name}</b> - {p.price:.2f}‚ÇΩ ({p.quantity} —à—Ç.)" for p in items])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èÆÔ∏è", callback_data="products:first"),
         InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="products:prev"),
         InlineKeyboardButton(text=f"{page}/{(total-1)//per_page+1}", callback_data="noop"),
         InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="products:next"),
         InlineKeyboardButton(text="‚è≠Ô∏è", callback_data="products:last")]
    ])
    await message.answer(
        "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n\n" + text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data.regexp(r"^products:(first|prev|next|last)$"))
async def paginate_products(callback: CallbackQuery, state: FSMContext, product_repo: ProductRepository):
    products = await product_repo.get_all_products(available_only=True)
    if not products:
        await callback.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
        return
    data = await state.get_data()
    page = int(data.get("products_page", 1))
    per_page = 10
    pages = max(1, (len(products)-1)//per_page + 1)
    action = callback.data.split(":")[1]
    old_page = page
    if action == "first":
        page = 1
    elif action == "prev":
        page = max(1, page-1)
    elif action == "next":
        page = min(pages, page+1)
    elif action == "last":
        page = pages
    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
    if page == old_page:
        await callback.answer("–≠—Ç–æ –∫—Ä–∞–π–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return
    await state.update_data(products_page=page)
    items = products[(page-1)*per_page: page*per_page]
    text = "\n".join([f"‚Ä¢ <b>{p.name}</b> - {p.price:.2f}‚ÇΩ ({p.quantity} —à—Ç.)" for p in items])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èÆÔ∏è", callback_data="products:first"),
         InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="products:prev"),
         InlineKeyboardButton(text=f"{page}/{pages}", callback_data="noop"),
         InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="products:next"),
         InlineKeyboardButton(text="‚è≠Ô∏è", callback_data="products:last")]
    ])
    try:
        await callback.message.edit_text(
            "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n\n" + text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest:
        await callback.answer()
    await callback.answer()


@router.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_support(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/Siriusatop123")]
    ])
    
    await message.answer(
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


@router.message(F.text == "üìä –§–∏–Ω–∞–Ω—Å—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@router.message(Command("stats"))
async def cmd_stats(message: Message, user_repo: UserRepository, config: Config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in config.bot.admin_ids:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", callback_data="stats:day"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats:week")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data="stats:month"),
            InlineKeyboardButton(text="üìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", callback_data="stats:popular")
        ],
        [
            InlineKeyboardButton(text="üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π", callback_data="stats:deposits"),
            InlineKeyboardButton(text="üõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="stats:purchases")
        ]
    ])
    
    await message.answer(
        "üìä <b>–§–∏–Ω–∞–Ω—Å—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback-–∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.callback_query(F.data == "stats:day")
async def stats_day(callback: CallbackQuery, transaction_repo: TransactionRepository):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å"""
    stats = await transaction_repo.get_statistics_by_period(1)
    
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å</b>\n\n"
    text += f"üõí <b>–ü–æ–∫—É–ø–∫–∏:</b>\n"
    text += f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{stats['purchases']['count']}—à—Ç</b>\n"
    text += f"   ‚Ä¢ –°—É–º–º–∞: <b>{stats['purchases']['amount']:.2f}‚ÇΩ</b>\n\n"
    text += f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n"
    text += f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{stats['deposit']['count']}—à—Ç</b>\n"
    text += f"   ‚Ä¢ –°—É–º–º–∞: <b>{stats['deposit']['amount']:.2f}‚ÇΩ</b>\n\n"
    text += f"üìà <b>–ò—Ç–æ–≥–æ:</b>\n"
    text += f"   ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: <b>{stats['purchases']['count'] + stats['deposit']['count']}—à—Ç</b>\n"
    text += f"   ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: <b>{stats['purchases']['amount'] + stats['deposit']['amount']:.2f}‚ÇΩ</b>"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats:back")]
        ]),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data == "stats:week")
async def stats_week(callback: CallbackQuery, transaction_repo: TransactionRepository):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    stats = await transaction_repo.get_statistics_by_period(7)
    
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
    text += f"üõí <b>–ü–æ–∫—É–ø–∫–∏:</b>\n"
    text += f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{stats['purchases']['count']}—à—Ç</b>\n"
    text += f"   ‚Ä¢ –°—É–º–º–∞: <b>{stats['purchases']['amount']:.2f}‚ÇΩ</b>\n\n"
    text += f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n"
    text += f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{stats['deposit']['count']}—à—Ç</b>\n"
    text += f"   ‚Ä¢ –°—É–º–º–∞: <b>{stats['deposit']['amount']:.2f}‚ÇΩ</b>\n\n"
    text += f"üìà <b>–ò—Ç–æ–≥–æ:</b>\n"
    text += f"   ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: <b>{stats['purchases']['count'] + stats['deposit']['count']}—à—Ç</b>\n"
    text += f"   ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: <b>{stats['purchases']['amount'] + stats['deposit']['amount']:.2f}‚ÇΩ</b>"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats:back")]
        ]),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data == "stats:month")
async def stats_month(callback: CallbackQuery, transaction_repo: TransactionRepository):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"""
    stats = await transaction_repo.get_statistics_by_period(30)
    
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü</b>\n\n"
    text += f"üõí <b>–ü–æ–∫—É–ø–∫–∏:</b>\n"
    text += f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{stats['purchases']['count']}—à—Ç</b>\n"
    text += f"   ‚Ä¢ –°—É–º–º–∞: <b>{stats['purchases']['amount']:.2f}‚ÇΩ</b>\n\n"
    text += f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n"
    text += f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{stats['deposit']['count']}—à—Ç</b>\n"
    text += f"   ‚Ä¢ –°—É–º–º–∞: <b>{stats['deposit']['amount']:.2f}‚ÇΩ</b>\n\n"
    text += f"üìà <b>–ò—Ç–æ–≥–æ:</b>\n"
    text += f"   ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: <b>{stats['purchases']['count'] + stats['deposit']['count']}—à—Ç</b>\n"
    text += f"   ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: <b>{stats['purchases']['amount'] + stats['deposit']['amount']:.2f}‚ÇΩ</b>"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats:back")]
        ]),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data == "stats:popular")
async def stats_popular(callback: CallbackQuery, transaction_repo: TransactionRepository, product_repo: ProductRepository):
    """–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
    popular_stats = await transaction_repo.get_popular_products_stats(5)
    
    text = "üìà <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</b>\n\n"
    
    if not popular_stats:
        text += "üìù –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫—É–ø–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤"
    else:
        for i, item in enumerate(popular_stats, 1):
            product_id = item["_id"]
            product = await product_repo.get_product(product_id)
            product_name = product.name if product else f"–¢–æ–≤–∞—Ä #{product_id}"
            
            text += f"{i}. <b>{product_name}</b>\n"
            text += f"   ‚Ä¢ –ü–æ–∫—É–ø–æ–∫: <b>{item['purchase_count']}—à—Ç</b>\n"
            text += f"   ‚Ä¢ –°—É–º–º–∞: <b>{item['total_amount']:.2f}‚ÇΩ</b>\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats:back")]
        ]),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data == "stats:deposits")
async def stats_deposits(callback: CallbackQuery, transaction_repo: TransactionRepository):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"""
    deposits = await transaction_repo.get_user_transactions(
        user_id=callback.from_user.id,
        transaction_type="deposit",
        limit=10
    )
    
    text = "üí∞ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</b>\n\n"
    
    if not deposits:
        text += "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"
    else:
        for deposit in deposits:
            text += (
                f"üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ #{deposit.receipt_id}</b>\n"
                f"üí∞ –°—É–º–º–∞: <b>{deposit.amount:.2f}‚ÇΩ</b>\n"
                f"üìÖ –î–∞—Ç–∞: {deposit.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: <b>{'–û–ø–ª–∞—á–µ–Ω–æ' if deposit.status == 'completed' else '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'}</b>\n\n"
            )
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats:back")]
        ]),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data == "stats:purchases")
async def stats_purchases(callback: CallbackQuery, transaction_repo: TransactionRepository):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫"""
    purchases = await transaction_repo.get_user_transactions(
        user_id=callback.from_user.id,
        transaction_type="purchase",
        limit=10
    )
    
    text = "üõí <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫</b>\n\n"
    
    if not purchases:
        text += "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫"
    else:
        for purchase in purchases:
            text += (
                f"üßæ <b>–ü–æ–∫—É–ø–∫–∞ #{purchase.receipt_id}</b>\n"
                f"üí∞ –°—É–º–º–∞: <b>{purchase.amount:.2f}‚ÇΩ</b>\n"
                f"üìÖ –î–∞—Ç–∞: {purchase.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: <b>{'–û–ø–ª–∞—á–µ–Ω–æ' if purchase.status == 'completed' else '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'}</b>\n\n"
            )
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats:back")]
        ]),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data == "stats:back")
async def stats_back(callback: CallbackQuery, config: Config):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if callback.from_user.id not in config.bot.admin_ids:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", callback_data="stats:day"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats:week")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data="stats:month"),
            InlineKeyboardButton(text="üìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", callback_data="stats:popular")
        ],
        [
            InlineKeyboardButton(text="üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π", callback_data="stats:deposits"),
            InlineKeyboardButton(text="üõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="stats:purchases")
        ]
    ])
    
    await callback.message.edit_text(
        "üìä <b>–§–∏–Ω–∞–Ω—Å—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data == "profile:purchases")
async def show_purchases(callback: CallbackQuery, user_repo: UserRepository, transaction_repo: TransactionRepository, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await user_repo.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await state.update_data(purchases_page=1)
    page = 1
    per_page = 5
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    transactions = await transaction_repo.get_user_transactions(
        user_id=callback.from_user.id,
        transaction_type="purchase",
        limit=100
    )
    
    if not transactions:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile:back")]
        ])
        
        await callback.message.edit_text(
            "üõí <b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.\n"
            "–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é!",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ–∫—É–ø–æ–∫
    text = "üõí <b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
    
    pages = max(1, (len(transactions)-1)//per_page + 1)
    rows = []
    for transaction in transactions[(page-1)*per_page: page*per_page]:
        text += (
            f"üßæ <b>–ß–µ–∫ #{transaction.receipt_id}</b>\n"
            f"üí∞ –°—É–º–º–∞: <b>{transaction.amount:.2f}‚ÇΩ</b>\n"
            f"üìÖ –î–∞—Ç–∞: {transaction.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: <b>{'–û–ø–ª–∞—á–µ–Ω–æ' if transaction.status == 'completed' else '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'}</b>\n"
        )
        # –∫–Ω–æ–ø–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≤—ã–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–µ–∫—É
        rows.append([InlineKeyboardButton(text=f"–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —á–µ–∫—É {transaction.receipt_id}", callback_data=f"profile:receipt:{transaction.receipt_id}")])
        text += "\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èÆÔ∏è", callback_data="profile:purchases:first"),
         InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="profile:purchases:prev"),
         InlineKeyboardButton(text=f"{page}/{pages}", callback_data="noop"),
         InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="profile:purchases:next"),
         InlineKeyboardButton(text="‚è≠Ô∏è", callback_data="profile:purchases:last")],
        *rows,
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile:back")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer()


@router.callback_query(F.data == "noop")
async def noop(callback: CallbackQuery):
    await callback.answer()


@router.callback_query(F.data.startswith("profile:receipt:"))
async def resend_purchase_data(callback: CallbackQuery, product_item_repo: ProductItemRepository, product_repo: ProductRepository):
    """–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É —á–µ–∫–∞"""
    receipt_id = callback.data.split(":")[-1]
    items = await product_item_repo.get_items_by_receipt(receipt_id, user_id=callback.from_user.id)
    if not items:
        await callback.answer("–î–∞–Ω–Ω—ã–µ –ø–æ —á–µ–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    for item in items:
        instruction = ""
        try:
            product = await product_repo.get_product(item.product_id)
            if product and product.instruction_link:
                instruction = f"\n\nüìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b> <a href='{product.instruction_link}'>–°—Å—ã–ª–∫–∞</a>"
        except Exception:
            pass
        await callback.message.answer(
            f"üì¶ <b>–î–∞–Ω–Ω—ã–µ –ø–æ —á–µ–∫—É {receipt_id}:</b>\n<code>{item.data}</code>" + instruction,
            parse_mode=ParseMode.HTML
        )
    await callback.answer()


@router.callback_query(F.data.regexp(r"^profile:purchases:(first|prev|next|last)$"))
async def paginate_purchases(callback: CallbackQuery, transaction_repo: TransactionRepository, state: FSMContext):
    data = await state.get_data()
    page = int(data.get("purchases_page", 1))
    per_page = 5
    transactions = await transaction_repo.get_user_transactions(
        user_id=callback.from_user.id,
        transaction_type="purchase",
        limit=100
    )
    if not transactions:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ–∫—É–ø–æ–∫", show_alert=True)
        return
    pages = max(1, (len(transactions)-1)//per_page + 1)
    action = callback.data.split(":")[-1]
    old_page = page
    if action == "first":
        page = 1
    elif action == "prev":
        page = max(1, page-1)
    elif action == "next":
        page = min(pages, page+1)
    elif action == "last":
        page = pages
    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
    if page == old_page:
        await callback.answer("–≠—Ç–æ –∫—Ä–∞–π–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return
    await state.update_data(purchases_page=page)
    text = "üõí <b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
    rows = []
    for transaction in transactions[(page-1)*per_page: page*per_page]:
        text += (
            f"üßæ <b>–ß–µ–∫ #{transaction.receipt_id}</b>\n"
            f"üí∞ –°—É–º–º–∞: <b>{transaction.amount:.2f}‚ÇΩ</b>\n"
            f"üìÖ –î–∞—Ç–∞: {transaction.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: <b>{'–û–ø–ª–∞—á–µ–Ω–æ' if transaction.status == 'completed' else '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'}</b>\n"
        )
        rows.append([InlineKeyboardButton(text=f"–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —á–µ–∫—É {transaction.receipt_id}", callback_data=f"profile:receipt:{transaction.receipt_id}")])
        text += "\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èÆÔ∏è", callback_data="profile:purchases:first"),
         InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="profile:purchases:prev"),
         InlineKeyboardButton(text=f"{page}/{pages}", callback_data="noop"),
         InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="profile:purchases:next"),
         InlineKeyboardButton(text="‚è≠Ô∏è", callback_data="profile:purchases:last")],
         *rows,
         [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile:back")]
    ])
    try:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        await callback.answer()
    await callback.answer()


@router.callback_query(F.data == "profile:refresh")
async def refresh_profile(callback: CallbackQuery, user_repo: UserRepository, config: Config):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await user_repo.get_user(callback.from_user.id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = callback.from_user.id in config.bot.admin_ids
    admin_status = "‚úÖ –î–∞" if is_admin else "‚ùå –ù–µ—Ç"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üõí –ü–æ–∫—É–ø–∫–∏", callback_data="profile:purchases")
        ],
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="profile:refresh")
        ]
    ])
    
    try:
        await callback.message.edit_text(
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî ID: <code>{user.user_id}</code>\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.balance:.2f}‚ÇΩ</b>\n"
            f"üõí –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{user.purchases}—à—Ç</b>\n"
            f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <b>{admin_status}</b>\n\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')} ({(datetime.now() - user.created_at).days} –¥–Ω–µ–π)",
            reply_markup=keyboard if is_admin else None,
            parse_mode=ParseMode.HTML
        )
        await callback.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await callback.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç—É–∞–ª–µ–Ω")


@router.callback_query(F.data == "profile:back")
async def back_to_profile(callback: CallbackQuery, user_repo: UserRepository, config: Config):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    user = await user_repo.get_user(callback.from_user.id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = callback.from_user.id in config.bot.admin_ids
    admin_status = "‚úÖ –î–∞" if is_admin else "‚ùå –ù–µ—Ç"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üõí –ü–æ–∫—É–ø–∫–∏", callback_data="profile:purchases")
        ],
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="profile:refresh")
        ]
    ])
    
    await callback.message.edit_text(
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: <code>{user.user_id}</code>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.balance:.2f}‚ÇΩ</b>\n"
        f"üõí –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{user.purchases}—à—Ç</b>\n"
        f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <b>{admin_status}</b>\n\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')} ({(datetime.now() - user.created_at).days} –¥–Ω–µ–π)",
        reply_markup=keyboard if is_admin else None,
        parse_mode=ParseMode.HTML
    )
    
    await callback.answer()