import asyncio
import json
import os
from datetime import datetime
from pathlib import Path
import tempfile
import zipfile

from aiogram import Bot
from aiogram.types import FSInputFile
from motor.motor_asyncio import AsyncIOMotorClient
from loguru import logger

from app.config import Config


async def create_backup(client: AsyncIOMotorClient, db_name: str) -> Path:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    backup_dir = Path(tempfile.mkdtemp())
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    collections = await client[db_name].list_collection_names()
    
    # –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    for collection_name in collections:
        collection_data = []
        cursor = client[db_name][collection_name].find({})
        
        async for document in cursor:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if "_id" in document:
                document["_id"] = str(document["_id"])
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
            for key, value in document.items():
                if isinstance(value, datetime):
                    document[key] = value.isoformat()
            
            collection_data.append(document)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
        with open(backup_dir / f"{collection_name}.json", "w", encoding="utf-8") as f:
            json.dump(collection_data, f, ensure_ascii=False, indent=2)
    
    # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ —Å JSON —Ñ–∞–π–ª–∞–º–∏
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    zip_path = backup_dir / f"backup_{timestamp}.zip"
    
    with zipfile.ZipFile(zip_path, "w") as zip_file:
        for json_file in backup_dir.glob("*.json"):
            zip_file.write(json_file, json_file.name)
    
    return zip_path


async def send_backup_to_admin(bot: Bot, config: Config, client: AsyncIOMotorClient):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = await create_backup(client, config.db.name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for admin_id in config.bot.admin_ids:
            try:
                await bot.send_document(
                    chat_id=admin_id,
                    document=FSInputFile(backup_path),
                    caption=f"üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\nüìÖ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                )
                logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.unlink(backup_path)
        for json_file in Path(backup_path).parent.glob("*.json"):
            os.unlink(json_file)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")


async def schedule_backups(bot: Bot, config: Config, client: AsyncIOMotorClient):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    while True:
        try:
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            await send_backup_to_admin(bot, config, client)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
        
        # –ñ–¥–µ–º 24 —á–∞—Å–∞
        await asyncio.sleep(24 * 60 * 60)